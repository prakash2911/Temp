const fs = require('fs');
const readline = require('readline');

class LogChunker {
    constructor(logFilePath) {
        this.logFilePath = logFilePath;
    }

    /**
     * Extract and chunk lines containing HTTP response
     * @param {Object} options - Chunking configuration
     * @param {number} [options.chunkSize=1024] - Size of each chunk in bytes
     * @param {number} [options.overlap=0] - Number of bytes to overlap between chunks
     * @returns {Promise<Array>} Chunked response lines
     */
    async extractAndChunkResponses(options = {}) {
        const {
            chunkSize = 1024,
            overlap = 0,
            responsePattern = /HTTP\/\d\.\d \d{3}/
        } = options;

        const chunks = [];
        const fileStream = fs.createReadStream(this.logFilePath, { encoding: 'utf8' });
        const rl = readline.createInterface({
            input: fileStream,
            crlfDelay: Infinity
        });

        return new Promise((resolve, reject) => {
            rl.on('line', (line) => {
                // Check if line contains HTTP response
                if (responsePattern.test(line)) {
                    // Chunk the response line
                    for (let i = 0; i < line.length; i += chunkSize - overlap) {
                        chunks.push({
                            text: line.slice(i, i + chunkSize),
                            startIndex: i,
                            endIndex: Math.min(i + chunkSize, line.length)
                        });
                    }
                }
            });

            rl.on('close', () => {
                resolve(chunks);
            });

            rl.on('error', (err) => {
                reject(err);
            });
        });
    }

    /**
     * Write chunked responses to a file
     * @param {Array} chunks - Chunked responses
     * @param {string} outputPath - Path to save chunks
     */
    async writeChunksToFile(chunks, outputPath) {
        const content = chunks.map(chunk => chunk.text).join('\n');
        await fs.promises.writeFile(outputPath, content);
    }
}

// Example usage
async function processLogFile() {
    try {
        const chunker = new LogChunker('path/to/your/logfile.log');
        
        // Extract and chunk responses
        const chunks = await chunker.extractAndChunkResponses({
            chunkSize: 1024,  // 1KB chunks
            overlap: 100,      // 100 bytes overlap
            responsePattern: /HTTP\/\d\.\d \d{3}/  // Customize regex as needed
        });

        // Optionally write chunks to a file
        await chunker.writeChunksToFile(chunks, 'response_chunks.txt');

        return chunks;
    } catch (error) {
        console.error('Error processing log file:', error);
    }
}

module.exports = {
    LogChunker,
    processLogFile
};