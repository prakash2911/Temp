const fs = require('fs');
const csv = require('csv-parser');
const createCsvWriter = require('csv-writer').createObjectCsvWriter;

class CSVComparator {
    constructor(file1Path, file2Path, options = {}) {
        this.file1Path = file1Path;
        this.file2Path = file2Path;
        this.options = {
            delimiter: options.delimiter || '|', // Pipe separator
            encoding: options.encoding || 'utf-8',
            ignoreColumns: options.ignoreColumns || [],
            emptyValuePlaceholders: options.emptyValuePlaceholders || ['', 'NA', 'N/A', 'null', '-']
        };
    }

    // Normalize numeric values without decimal precision
    normalizeNumeric(value) {
        // Handle empty or null-like values
        if (this.isEmptyValue(value)) {
            return '';
        }

        // Convert to string and clean
        const strValue = String(value).trim()
            .replace(/,/g, '')    // Remove commas
            .replace(/\s/g, '')   // Remove spaces
            .replace(/â‚¹/g, '')    // Remove currency symbols
            .replace(/\$/g, '');  // Remove dollar signs

        try {
            // Handle exponential and regular numeric notation
            if (/^-?\d+(\.\d+)?([eE][-+]?\d+)?$/.test(strValue)) {
                // Convert to integer or full number without decimal manipulation
                return Number(strValue).toString();
            }
            
            return value; // Return original if not a number
        } catch (error) {
            return value; // Return original on conversion error
        }
    }

    // Check if value is considered empty
    isEmptyValue(value) {
        if (value === null || value === undefined) return true;
        
        const strValue = String(value).trim();
        return this.options.emptyValuePlaceholders.includes(strValue);
    }

    // Read and normalize CSV with pipe delimiter
    async readNormalizedCSV(filePath) {
        return new Promise((resolve, reject) => {
            const results = new Set();
            const csvOptions = {
                separator: this.options.delimiter,
                headers: true // Use first row as headers
            };

            fs.createReadStream(filePath, { encoding: this.options.encoding })
                .pipe(csv(csvOptions))
                .on('data', (data) => {
                    const normalizedRow = {};
                    
                    // Normalize each column
                    Object.keys(data).forEach((key) => {
                        const value = data[key];
                        
                        // Skip ignored columns
                        if (this.options.ignoreColumns.includes(key)) {
                            normalizedRow[key] = value;
                            return;
                        }

                        // Normalize numeric values
                        normalizedRow[key] = this.normalizeNumeric(value);
                    });

                    // Convert to string for set comparison
                    results.add(JSON.stringify(normalizedRow));
                })
                .on('end', () => {
                    resolve(results);
                })
                .on('error', (error) => {
                    reject(error);
                });
        });
    }

    // Compare CSV files
    async compare() {
        try {
            // Read and normalize both files
            const file1Rows = await this.readNormalizedCSV(this.file1Path);
            const file2Rows = await this.readNormalizedCSV(this.file2Path);

            // Find differences
            const onlyInFile1 = new Set(
                [...file1Rows].filter(row => !file2Rows.has(row))
            );
            const onlyInFile2 = new Set(
                [...file2Rows].filter(row => !file1Rows.has(row))
            );

            // Prepare results
            const results = {
                totalRowsFile1: file1Rows.size,
                totalRowsFile2: file2Rows.size,
                uniqueInFile1: onlyInFile1.size,
                uniqueInFile2: onlyInFile2.size,
                rowsOnlyInFile1: [...onlyInFile1].map(row => JSON.parse(row)),
                rowsOnlyInFile2: [...onlyInFile2].map(row => JSON.parse(row))
            };

            return results;
        } catch (error) {
            console.error('Comparison error:', error);
            throw error;
        }
    }

    // Generate detailed comparison report
    async generateDetailedReport(outputDir = './') {
        const comparisonResults = await this.compare();

        // Create output directory if not exists
        if (!fs.existsSync(outputDir)){
            fs.mkdirSync(outputDir, { recursive: true });
        }

        // Logging comparison details
        const logStream = fs.createWriteStream(`${outputDir}/comparison_log.txt`, { flags: 'w' });
        
        logStream.write('Comparison Report\n');
        logStream.write('=================\n\n');
        logStream.write(`Total rows in File 1: ${comparisonResults.totalRowsFile1}\n`);
        logStream.write(`Total rows in File 2: ${comparisonResults.totalRowsFile2}\n`);
        logStream.write(`Unique rows in File 1: ${comparisonResults.uniqueInFile1}\n`);
        logStream.write(`Unique rows in File 2: ${comparisonResults.uniqueInFile2}\n\n`);

        // Write rows unique to File 1
        const csvWriterFile1 = createCsvWriter({
            path: `${outputDir}/unique_in_file1.csv`,
            header: Object.keys(comparisonResults.rowsOnlyInFile1[0] || {}).map(id => ({ id, title: id }))
        });
        await csvWriterFile1.writeRecords(comparisonResults.rowsOnlyInFile1);

        // Write rows unique to File 2
        const csvWriterFile2 = createCsvWriter({
            path: `${outputDir}/unique_in_file2.csv`,
            header: Object.keys(comparisonResults.rowsOnlyInFile2[0] || {}).map(id => ({ id, title: id }))
        });
        await csvWriterFile2.writeRecords(comparisonResults.rowsOnlyInFile2);

        logStream.write('Detailed comparison files have been generated.\n');
        logStream.end();

        console.log('Comparison report generated successfully.');
        return comparisonResults;
    }
}

// Example usage
async function runComparison() {
    try {
        const comparator = new CSVComparator(
            './file1.csv',  // First file
            './file2.csv',  // Second file
            {
                delimiter: '|',
                ignoreColumns: ['timestamp'], // Columns to ignore in comparison
                emptyValuePlaceholders: ['', 'NA', 'N/A', 'null', '-', '0']
            }
        );

        // Generate detailed comparison report
        const results = await comparator.generateDetailedReport('./output');
        
        // Optional: Log specific details
        console.log('Unique rows in File 1:', results.uniqueInFile1);
        console.log('Unique rows in File 2:', results.uniqueInFile2);
    } catch (error) {
        console.error('Comparison failed:', error);
    }
}

// Export for use in other modules
module.exports = {
    CSVComparator,
    runComparison
};

// Uncomment to run directly
// runComparison();