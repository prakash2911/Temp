const fs = require('fs');
const readline = require('readline');

class LogSeparator {
    /**
     * Separate requests and responses from a large log file
     * @param {string} inputLogFile - Path to the input log file
     * @param {Object} options - Configuration options for output files
     */
    static async separateLogFile(inputLogFile, options = {}) {
        // Default output file names
        const requestOutputFile = options.requestOutputFile || 'rest_call_requests.log';
        const responseOutputFile = options.responseOutputFile || 'http_responses.log';

        // Create write streams for requests and responses
        const requestWriteStream = fs.createWriteStream(requestOutputFile);
        const responseWriteStream = fs.createWriteStream(responseOutputFile);

        // Create readline interface
        const fileStream = fs.createReadStream(inputLogFile);
        const rl = readline.createInterface({
            input: fileStream,
            crlfDelay: Infinity
        });

        // Counters for logging
        let requestCount = 0;
        let responseCount = 0;

        // Process each line
        for await (const line of rl) {
            // Check for REST CALL Request lines
            if (line.includes('REST CALL Request:')) {
                requestWriteStream.write(line + '\n');
                requestCount++;
            }

            // Check for HTTP Response lines
            if (line.includes('HTTP Response:')) {
                responseWriteStream.write(line + '\n');
                responseCount++;
            }
        }

        // Close write streams
        requestWriteStream.end();
        responseWriteStream.end();

        console.log(`Log separation completed.`);
        console.log(`Requests found: ${requestCount}`);
        console.log(`Responses found: ${responseCount}`);
    }

    /**
     * Advanced separator with additional filtering capabilities
     * @param {string} inputLogFile - Path to the input log file
     * @param {Object} options - Advanced configuration options
     */
    static async advancedSeparate(inputLogFile, options = {}) {
        const {
            requestOutputFile = 'rest_call_requests.log',
            responseOutputFile = 'http_responses.log',
            requestFilter = () => true,
            responseFilter = () => true,
            universalRequestIdExtractor = null
        } = options;

        const requestWriteStream = fs.createWriteStream(requestOutputFile);
        const responseWriteStream = fs.createWriteStream(responseOutputFile);

        const fileStream = fs.createReadStream(inputLogFile);
        const rl = readline.createInterface({
            input: fileStream,
            crlfDelay: Infinity
        });

        let requestCount = 0;
        let responseCount = 0;

        for await (const line of rl) {
            // Request separation with additional filtering
            if (line.includes('REST CALL Request:')) {
                if (requestFilter(line)) {
                    // Optional universal request ID tracking
                    if (universalRequestIdExtractor) {
                        const requestId = universalRequestIdExtractor(line);
                        if (requestId) {
                            requestWriteStream.write(`[Request ID: ${requestId}] ${line}\n`);
                        }
                    } else {
                        requestWriteStream.write(line + '\n');
                    }
                    requestCount++;
                }
            }

            // Response separation with additional filtering
            if (line.includes('HTTP Response:')) {
                if (responseFilter(line)) {
                    // Optional universal request ID tracking
                    if (universalRequestIdExtractor) {
                        const responseId = universalRequestIdExtractor(line);
                        if (responseId) {
                            responseWriteStream.write(`[Response ID: ${responseId}] ${line}\n`);
                        }
                    } else {
                        responseWriteStream.write(line + '\n');
                    }
                    responseCount++;
                }
            }
        }

        requestWriteStream.end();
        responseWriteStream.end();

        console.log(`Advanced log separation completed.`);
        console.log(`Requests found: ${requestCount}`);
        console.log(`Responses found: ${responseCount}`);
    }
}

module.exports = LogSeparator;

const LogSeparator = require('./logSeparator');

async function main() {
    try {
        // Simple separation
        await LogSeparator.separateLogFile('large_input.log', {
            requestOutputFile: 'requests.log',
            responseOutputFile: 'responses.log'
        });

        // Advanced separation with custom filtering
        await LogSeparator.advancedSeparate('large_input.log', {
            requestOutputFile: 'filtered_requests.log',
            responseOutputFile: 'filtered_responses.log',
            
            // Optional filter to only include specific requests
            requestFilter: (line) => {
                // Example: Only include requests with specific endpoint
                return line.includes('/api/users');
            },

            // Optional filter to only include specific responses
            responseFilter: (line) => {
                // Example: Only include successful responses (status code 200)
                return line.includes('HTTP/1.1 200');
            },

            // Optional extractor for universal request ID
            universalRequestIdExtractor: (line) => {
                // Example: Extract universal request ID 
                const match = line.match(/universal-request-id[=:]\s*(\w+)/);
                return match ? match[1] : null;
            }
        });
    } catch (error) {
        console.error('Error processing log file:', error);
    }
}

main();