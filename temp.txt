import React, { useState } from 'react';
import { 
  Upload, 
  Button, 
  Modal, 
  message, 
  Table, 
  UploadFile
} from 'antd';
import { InboxOutlined } from '@ant-design/icons';
import Papa from 'papaparse';
import * as XLSX from 'xlsx';
import type { UploadProps } from 'antd';
import type { ColumnsType } from 'antd/es/table';

const { Dragger } = Upload;

interface TableDataType {
  key: number;
  [key: string]: string | number;
}

interface CsvDataType {
  columns: ColumnsType<TableDataType>;
  data: TableDataType[];
}

const FileUploader: React.FC = () => {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [previewVisible, setPreviewVisible] = useState<boolean>(false);
  const [csvData, setCsvData] = useState<CsvDataType>({ columns: [], data: [] });
  const [fileList, setFileList] = useState<UploadFile[]>([]);

  const processExcelFile = (file: File): Promise<void> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = (e: ProgressEvent<FileReader>) => {
        try {
          const data = e.target?.result;
          const workbook = XLSX.read(data, { type: 'binary' });
          const sheetName = workbook.SheetNames[0];
          const worksheet = workbook.Sheets[sheetName];
          const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

          if (jsonData && jsonData.length > 0) {
            const columnCount = (jsonData[0] as string[]).length;
            
            const columns: ColumnsType<TableDataType> = Array.from(
              { length: columnCount }, 
              (_, index) => ({
                title: `Column${index + 1}`,
                dataIndex: `column${index + 1}`,
                key: `column${index + 1}`,
                render: (text: string) => text || '-'
              })
            );

            const dataRows: TableDataType[] = (jsonData as string[][])
              .filter(row => row.some(cell => cell))
              .map((row, rowIndex) => {
                const rowData: TableDataType = {
                  key: rowIndex
                };
                row.forEach((cell, cellIndex) => {
                  rowData[`column${cellIndex + 1}`] = cell;
                });
                return rowData;
              });

            setCsvData({
              columns,
              data: dataRows
            });
            resolve();
          } else {
            reject(new Error('No data found in file'));
          }
        } catch (error) {
          reject(error);
        }
      };
      reader.onerror = () => reject(new Error('Error reading file'));
      reader.readAsBinaryString(file);
    });
  };

  const processCsvFile = (file: File): Promise<void> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = (event: ProgressEvent<FileReader>) => {
        if (!event.target?.result) {
          reject(new Error('No file content'));
          return;
        }

        Papa.parse(event.target.result.toString(), {
          complete: (result) => {
            try {
              if (result.data && result.data.length > 0) {
                const columnCount = (result.data[0] as string[]).length;
                
                const columns: ColumnsType<TableDataType> = Array.from(
                  { length: columnCount }, 
                  (_, index) => ({
                    title: `Column${index + 1}`,
                    dataIndex: `column${index + 1}`,
                    key: `column${index + 1}`,
                    render: (text: string) => text || '-'
                  })
                );

                const dataRows: TableDataType[] = (result.data as string[][])
                  .filter(row => row.some(cell => cell))
                  .map((row, rowIndex) => {
                    const rowData: TableDataType = {
                      key: rowIndex
                    };
                    row.forEach((cell, cellIndex) => {
                      rowData[`column${cellIndex + 1}`] = cell;
                    });
                    return rowData;
                  });

                setCsvData({
                  columns,
                  data: dataRows
                });
                resolve();
              } else {
                reject(new Error('No data found in CSV file'));
              }
            } catch (error) {
              reject(error);
            }
          },
          error: (error: Error) => {
            reject(error);
          }
        });
      };
      reader.onerror = () => reject(new Error('Error reading file'));
      reader.readAsText(file);
    });
  };

  const handleFileSelect = (file: File): false => {
    // Check file type
    const isCsv = file.type === 'text/csv';
    const isExcel = 
      file.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' || 
      file.type === 'application/vnd.ms-excel';

    if (!isCsv && !isExcel) {
      message.error('Please upload CSV or XLSX file only!');
      return false;
    }

    // Create UploadFile object with required properties
    const uploadFile: UploadFile = {
      uid: `-${Date.now()}`, // Generate unique ID
      name: file.name,
      status: 'done',
      size: file.size,
      type: file.type,
      originFileObj: file
    };

    setSelectedFile(file);
    setFileList([uploadFile]);
    return false;
  };

  const handlePreview = async (): Promise<void> => {
    if (!selectedFile) {
      message.error('Please select a file first!');
      return;
    }

    try {
      const isExcel = 
        selectedFile.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' || 
        selectedFile.type === 'application/vnd.ms-excel';

      if (isExcel) {
        await processExcelFile(selectedFile);
      } else {
        await processCsvFile(selectedFile);
      }

      setPreviewVisible(true);
    } catch (error) {
      console.error('Error processing file:', error);
      message.error('Error processing file');
    }
  };

  const handleUpload = async (): Promise<void> => {
    if (!selectedFile) {
      message.error('Please select a file first!');
      return;
    }

    const formData = new FormData();
    formData.append('file', selectedFile);

    try {
      const response = await fetch('YOUR_SPRING_BOOT_API_ENDPOINT', {
        method: 'POST',
        body: formData,
      });

      if (response.ok) {
        message.success('File uploaded successfully!');
        setSelectedFile(null);
        setFileList([]);
      } else {
        message.error('Upload failed!');
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
      message.error('Error uploading file: ' + errorMessage);
    }
  };

  const draggerProps: UploadProps = {
    name: 'file',
    multiple: false,
    fileList,
    beforeUpload: handleFileSelect,
    onRemove: () => {
      setSelectedFile(null);
      setFileList([]);
    },
    accept: '.csv,.xlsx,.xls'
  };

  return (
    <div className="p-6">
      <Dragger {...draggerProps}>
        <p className="ant-upload-drag-icon">
          <InboxOutlined />
        </p>
        <p className="ant-upload-text">
          Click or drag file to this area to upload
        </p>
        <p className="ant-upload-hint">
          Support for CSV and Excel files only
        </p>
      </Dragger>

      <div className="mt-4 flex gap-4">
        <Button 
          type="primary" 
          onClick={handlePreview}
          disabled={!selectedFile}
        >
          Preview
        </Button>
        <Button 
          type="primary" 
          onClick={handleUpload}
          disabled={!selectedFile}
        >
          Upload
        </Button>
      </div>

      <Modal
        title="File Preview"
        open={previewVisible}
        onCancel={() => setPreviewVisible(false)}
        width={800}
        footer={null}
      >
        <Table
          columns={csvData.columns}
          dataSource={csvData.data}
          scroll={{ x: true, y: 400 }}
          pagination={{
            pageSize: 10,
            total: csvData.data.length
          }}
        />
      </Modal>
    </div>
  );
};

export default FileUploader;
