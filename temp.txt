import React, { useState } from 'react';
import { 
  Upload, 
  Button, 
  Modal, 
  message, 
  Table, 
  UploadFile
} from 'antd';
import { InboxOutlined } from '@ant-design/icons';
import Papa from 'papaparse';
import type { UploadProps } from 'antd';
import type { ColumnsType } from 'antd/es/table';

const { Dragger } = Upload;

interface TableDataType {
  key: number;
  [key: string]: string | number; // Allow dynamic column names
}

interface CsvDataType {
  columns: ColumnsType<TableDataType>;
  data: TableDataType[];
}

const CSVFileUploader: React.FC = () => {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [previewVisible, setPreviewVisible] = useState<boolean>(false);
  const [csvData, setCsvData] = useState<CsvDataType>({ columns: [], data: [] });
  const [fileList, setFileList] = useState<UploadFile[]>([]);

  const handleFileSelect = (file: File): false => {
    // Check if file is CSV
    if (file.type !== 'text/csv') {
      message.error('Please upload CSV file only!');
      return false;
    }

    setSelectedFile(file);
    setFileList([file]);
    return false; // Prevent default upload behavior
  };

  const handlePreview = (): void => {
    if (!selectedFile) {
      message.error('Please select a file first!');
      return;
    }

    const reader = new FileReader();
    reader.onload = (event: ProgressEvent<FileReader>) => {
      if (!event.target?.result) return;

      Papa.parse(event.target.result.toString(), {
        complete: (result) => {
          try {
            if (result.data && result.data.length > 0) {
              // Get the number of columns from the first row
              const columnCount = (result.data[0] as string[]).length;
              
              // Create default column names (Column1, Column2, etc.)
              const columns: ColumnsType<TableDataType> = Array.from(
                { length: columnCount }, 
                (_, index) => ({
                  title: `Column${index + 1}`,
                  dataIndex: `column${index + 1}`,
                  key: `column${index + 1}`,
                  render: (text: string) => text || '-' // Handle empty values
                })
              );

              // Process all rows as data
              const dataRows: TableDataType[] = (result.data as string[][])
                .filter(row => row.some(cell => cell)) // Filter out empty rows
                .map((row, rowIndex) => {
                  const rowData: TableDataType = {
                    key: rowIndex
                  };
                  // Map each cell to its corresponding column
                  row.forEach((cell, cellIndex) => {
                    rowData[`column${cellIndex + 1}`] = cell;
                  });
                  return rowData;
                });

              setCsvData({
                columns,
                data: dataRows
              });
              setPreviewVisible(true);
            } else {
              message.error('No data found in CSV file');
            }
          } catch (error) {
            console.error('Error processing CSV:', error);
            message.error('Error processing CSV file');
          }
        },
        error: (error: Error) => {
          console.error('Error parsing CSV:', error);
          message.error('Error parsing CSV file');
        }
      });
    };

    reader.onerror = () => {
      message.error('Error reading file');
    };

    reader.readAsText(selectedFile);
  };

  const handleUpload = async (): Promise<void> => {
    if (!selectedFile) {
      message.error('Please select a file first!');
      return;
    }

    const formData = new FormData();
    formData.append('file', selectedFile);

    try {
      const response = await fetch('YOUR_SPRING_BOOT_API_ENDPOINT', {
        method: 'POST',
        body: formData,
      });

      if (response.ok) {
        message.success('File uploaded successfully!');
        setSelectedFile(null);
        setFileList([]);
      } else {
        message.error('Upload failed!');
      }
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
      message.error('Error uploading file: ' + errorMessage);
    }
  };

  const draggerProps: UploadProps = {
    name: 'file',
    multiple: false,
    fileList,
    beforeUpload: handleFileSelect,
    onRemove: () => {
      setSelectedFile(null);
      setFileList([]);
    },
    accept: '.csv'
  };

  return (
    <div className="p-6">
      <Dragger {...draggerProps}>
        <p className="ant-upload-drag-icon">
          <InboxOutlined />
        </p>
        <p className="ant-upload-text">
          Click or drag CSV file to this area to upload
        </p>
        <p className="ant-upload-hint">
          Support for single CSV file upload only
        </p>
      </Dragger>

      <div className="mt-4 flex gap-4">
        <Button 
          type="primary" 
          onClick={handlePreview}
          disabled={!selectedFile}
        >
          Preview
        </Button>
        <Button 
          type="primary" 
          onClick={handleUpload}
          disabled={!selectedFile}
        >
          Upload
        </Button>
      </div>

      <Modal
        title="CSV Preview"
        open={previewVisible}
        onCancel={() => setPreviewVisible(false)}
        width={800}
        footer={null}
      >
        <Table
          columns={csvData.columns}
          dataSource={csvData.data}
          scroll={{ x: true, y: 400 }}
          pagination={{
            pageSize: 10,
            total: csvData.data.length
          }}
        />
      </Modal>
    </div>
  );
};

export default CSVFileUploader;
